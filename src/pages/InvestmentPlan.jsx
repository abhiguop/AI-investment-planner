import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { useInvestmentContext } from '../context/InvestmentContext';
import { jsPDF } from "jspdf";
import { PieChart, Download, ArrowRight, RefreshCw, Info, AlertCircle } from 'lucide-react';
import { Doughnut } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { getGeminiInvestmentSuggestions } from '../services/geminiService';

// Register Chart.js components
ChartJS.register(ArcElement, Tooltip, Legend);

const InvestmentPlan = () => {
  const { investmentPlan, hasCompletedRiskAssessment, updateInvestmentSuggestions } = useInvestmentContext();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    document.title = 'Investment Plan | InvestWise';
    
    // Fetch investment suggestions if needed
    if (hasCompletedRiskAssessment && !investmentPlan.suggestedInvestments) {
      fetchSuggestions();
    }
  }, [hasCompletedRiskAssessment, investmentPlan.suggestedInvestments]);
  
  // Fetch investment suggestions from Gemini API
  const fetchSuggestions = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const promptData = {
        monthlyAmount: investmentPlan.monthlyInvestmentAmount,
        riskProfile: investmentPlan.riskProfile,
        equityAllocation: investmentPlan.equityAllocation,
        bondsAllocation: investmentPlan.bondsAllocation,
        goldAllocation: investmentPlan.goldAllocation,
        cryptoAllocation: investmentPlan.cryptoAllocation,
        cashAllocation: investmentPlan.cashAllocation
      };
      
      const suggestions = await getGeminiInvestmentSuggestions(promptData);
      updateInvestmentSuggestions(suggestions);
    } catch (err) {
      console.error("Error fetching investment suggestions:", err);
      setError("Failed to get AI investment suggestions. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };
  
  // Generate PDF report
  const generatePDF = () => {
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor(74, 0, 224);
    doc.text("InvestWise: Your Personalized Investment Plan", 20, 20);
    
    // Add risk profile section
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text("Risk Profile", 20, 40);
    
    doc.setFontSize(12);
    doc.text(`Risk Score: ${investmentPlan.riskScore}/10`, 20, 50);
    doc.text(`Profile: ${investmentPlan.riskProfile}`, 20, 58);
    doc.text(`Description: ${investmentPlan.riskDescription}`, 20, 66, { maxWidth: 170 });
    
    // Add allocation section
    doc.setFontSize(16);
    doc.text("Recommended Asset Allocation", 20, 90);
    
    doc.setFontSize(12);
    doc.text(`Equity Mutual Funds: ${investmentPlan.equityAllocation}%`, 20, 100);
    doc.text(`Government Bonds: ${investmentPlan.bondsAllocation}%`, 20, 108);
    doc.text(`Gold ETFs: ${investmentPlan.goldAllocation}%`, 20, 116);
    doc.text(`Cryptocurrency: ${investmentPlan.cryptoAllocation}%`, 20, 124);
    doc.text(`Cash & Equivalents: ${investmentPlan.cashAllocation}%`, 20, 132);
    
    // Add monthly investment amount
    doc.setFontSize(16);
    doc.text("Monthly Investment", 20, 150);
    
    doc.setFontSize(12);
    doc.text(`Recommended Monthly Investment: ₹${investmentPlan.monthlyInvestmentAmount.toLocaleString()}`, 20, 160);
    
    // Add suggested investments if available
    if (investmentPlan.suggestedInvestments) {
      doc.setFontSize(16);
      doc.text("AI-Suggested Investments", 20, 180);
      
      doc.setFontSize(12);
      let yPos = 190;
      
      investmentPlan.suggestedInvestments.forEach((suggestion) => {
        // Check if we need to add a new page
        if (yPos > 270) {
          doc.addPage();
          yPos = 20;
        }
        
        doc.setTextColor(74, 0, 224);
        doc.text(suggestion.category, 20, yPos);
        
        doc.setTextColor(0, 0, 0);
        yPos += 8;
        
        suggestion.options.forEach((option) => {
          doc.text(`• ${option}`, 25, yPos);
          yPos += 8;
        });
        
        yPos += 5;
      });
    }
    
    // Add footer
    const date = new Date().toLocaleDateString();
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated by InvestWise on ${date}`, 20, 285);
    
    // Save the PDF
    doc.save("InvestWise-Investment-Plan.pdf");
  };
  
  // Chart data
  const chartData = {
    labels: ['Equity Mutual Funds', 'Government Bonds', 'Gold ETFs', 'Cryptocurrency', 'Cash'],
    datasets: [
      {
        data: [
          investmentPlan.equityAllocation || 30, 
          investmentPlan.bondsAllocation || 40, 
          investmentPlan.goldAllocation || 15, 
          investmentPlan.cryptoAllocation || 5, 
          investmentPlan.cashAllocation || 10
        ],
        backgroundColor: [
          'rgba(74, 0, 224, 0.8)',
          'rgba(0, 184, 212, 0.8)',
          'rgba(255, 215, 0, 0.8)',
          'rgba(244, 67, 54, 0.8)',
          'rgba(158, 158, 158, 0.8)'
        ],
        borderColor: [
          'rgba(74, 0, 224, 1)',
          'rgba(0, 184, 212, 1)',
          'rgba(255, 215, 0, 1)',
          'rgba(244, 67, 54, 1)',
          'rgba(158, 158, 158, 1)'
        ],
        borderWidth: 1,
      },
    ],
  };
  
  // Chart options
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'right',
        labels: {
          font: {
            family: "'Inter', sans-serif",
            size: 14
          },
          usePointStyle: true,
          padding: 20
        }
      },
      tooltip: {
        backgroundColor: 'rgba(255, 255, 255, 0.9)',
        titleColor: '#1a202c',
        bodyColor: '#4a5568',
        bodyFont: {
          family: "'Inter', sans-serif"
        },
        borderColor: 'rgba(0, 0, 0, 0.1)',
        borderWidth: 1,
        padding: 12,
        boxPadding: 8,
        displayColors: true,
        callbacks: {
          label: function(context) {
            return `${context.label}: ${context.parsed}%`;
          }
        }
      }
    }
  };
  
  // If user hasn't completed risk assessment, redirect to assessment page
  if (!hasCompletedRiskAssessment) {
    return (
      <div className="pt-24 pb-12 max-w-4xl mx-auto">
        <div className="glass-card p-8 text-center">
          <AlertCircle size={48} className="text-amber-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold mb-4">Risk Assessment Required</h2>
          <p className="text-gray-600 mb-6">
            Please complete your risk assessment first to get a personalized investment plan.
          </p>
          <Link to="/risk-assessment" className="btn btn-primary">
            Go to Risk Assessment
            <ArrowRight size={16} className="ml-2" />
          </Link>
        </div>
      </div>
    );
  }
  
  return (
    <div className="pt-24 pb-12">
      <div className="flex justify-between items-center mb-8 flex-wrap gap-4">
        <div>
          <h1 className="text-3xl md:text-4xl font-bold mb-2">Your Investment Plan</h1>
          <p className="text-lg text-gray-600">
            Personalized investment strategy based on your risk profile
          </p>
        </div>
        
        <div className="flex gap-3">
          <button onClick={generatePDF} className="btn bg-white border border-gray-300 text-gray-700 hover:bg-gray-100">
            <Download size={18} className="mr-2" />
            Download PDF
          </button>
          <Link to="/historical-simulation" className="btn btn-primary">
            View Simulation
            <ArrowRight size={18} className="ml-2" />
          </Link>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        {/* Risk Profile */}
        <motion.div 
          className="glass-card p-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4 }}
        >
          <h3 className="text-xl font-semibold mb-4">Risk Profile</h3>
          
          <div className="mb-4">
            <p className="text-sm text-gray-500 mb-1">Risk Score</p>
            <div className="flex items-center">
              <span className="text-2xl font-bold">{investmentPlan.riskScore}/10</span>
              <div className="ml-3 flex-1 bg-gray-200 h-2 rounded-full">
                <div 
                  className="h-2 rounded-full bg-gradient-to-r from-green-500 to-indigo-600" 
                  style={{ width: `${investmentPlan.riskScore * 10}%` }}
                ></div>
              </div>
            </div>
          </div>
          
          <div className="mb-4">
            <p className="text-sm text-gray-500 mb-1">Profile Type</p>
            <p className="text-xl font-semibold">{investmentPlan.riskProfile}</p>
          </div>
          
          <div className="bg-indigo-50 rounded-lg p-4">
            <div className="flex items-start mb-2">
              <Info size={18} className="text-indigo-600 mr-2 mt-0.5" />
              <p className="text-sm font-medium">Profile Description</p>
            </div>
            <p className="text-sm text-gray-700">
              {investmentPlan.riskDescription}
            </p>
          </div>
        </motion.div>
        
        {/* Asset Allocation Chart */}
        <motion.div 
          className="glass-card p-6 lg:col-span-2"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.1 }}
        >
          <h3 className="text-xl font-semibold mb-4">Recommended Asset Allocation</h3>
          <div className="h-80">
            <Doughnut data={chartData} options={chartOptions} />
          </div>
        </motion.div>
      </div>
      
      {/* Monthly Investment and Breakdown */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <motion.div 
          className="glass-card p-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.2 }}
        >
          <h3 className="text-xl font-semibold mb-4">Monthly Investment</h3>
          <h2 className="text-3xl font-bold mb-2">
            ₹{investmentPlan.monthlyInvestmentAmount.toLocaleString()}
          </h2>
          <p className="text-gray-600 text-sm mb-4">
            Recommended monthly investment amount based on your income, expenses, and risk profile.
          </p>
          
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="flex items-center">
                <span className="w-3 h-3 rounded-full bg-indigo-600 mr-2"></span>
                <span className="text-sm">Equity Funds</span>
              </span>
              <span className="text-sm font-medium">
                ₹{Math.round(investmentPlan.monthlyInvestmentAmount * (investmentPlan.equityAllocation / 100)).toLocaleString()}
              </span>
            </div>
            
            <div className="flex justify-between items-center">
              <span className="flex items-center">
                <span className="w-3 h-3 rounded-full bg-teal-500 mr-2"></span>
                <span className="text-sm">Bonds</span>
              </span>
              <span className="text-sm font-medium">
                ₹{Math.round(investmentPlan.monthlyInvestmentAmount * (investmentPlan.bondsAllocation / 100)).toLocaleString()}
              </span>
            </div>
            
            <div className="flex justify-between items-center">
              <span className="flex items-center">
                <span className="w-3 h-3 rounded-full bg-amber-400 mr-2"></span>
                <span className="text-sm">Gold</span>
              </span>
              <span className="text-sm font-medium">
                ₹{Math.round(investmentPlan.monthlyInvestmentAmount * (investmentPlan.goldAllocation / 100)).toLocaleString()}
              </span>
            </div>
            
            <div className="flex justify-between items-center">
              <span className="flex items-center">
                <span className="w-3 h-3 rounded-full bg-red-500 mr-2"></span>
                <span className="text-sm">Crypto</span>
              </span>
              <span className="text-sm font-medium">
                ₹{Math.round(investmentPlan.monthlyInvestmentAmount * (investmentPlan.cryptoAllocation / 100)).toLocaleString()}
              </span>
            </div>
            
            <div className="flex justify-between items-center">
              <span className="flex items-center">
                <span className="w-3 h-3 rounded-full bg-gray-500 mr-2"></span>
                <span className="text-sm">Cash</span>
              </span>
              <span className="text-sm font-medium">
                ₹{Math.round(investmentPlan.monthlyInvestmentAmount * (investmentPlan.cashAllocation / 100)).toLocaleString()}
              </span>
            </div>
          </div>
        </motion.div>
        
        {/* AI Investment Suggestions */}
        <motion.div 
          className="glass-card p-6 lg:col-span-2"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.3 }}
        >
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-xl font-semibold">AI Investment Suggestions</h3>
            <button 
              onClick={fetchSuggestions} 
              className="text-indigo-600 hover:text-indigo-800"
              disabled={isLoading}
            >
              <RefreshCw size={18} className={`${isLoading ? 'animate-spin' : ''}`} />
            </button>
          </div>
          
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4">
              <p className="text-sm">{error}</p>
            </div>
          )}
          
          {isLoading ? (
            <div className="flex flex-col items-center justify-center py-8">
              <RefreshCw size={36} className="text-indigo-600 animate-spin mb-4" />
              <p className="text-gray-600">Generating AI investment suggestions...</p>
            </div>
          ) : investmentPlan.suggestedInvestments ? (
            <div className="space-y-6 max-h-80 overflow-y-auto p-1">
              {investmentPlan.suggestedInvestments.map((category, index) => (
                <div key={index} className="border-b border-gray-200 pb-4 last:border-b-0 last:pb-0">
                  <h4 className="font-semibold text-indigo-700 mb-2">{category.category}</h4>
                  <ul className="space-y-1">
                    {category.options.map((option, idx) => (
                      <li key={idx} className="text-sm text-gray-700 flex items-start">
                        <span className="inline-block w-2 h-2 rounded-full bg-indigo-600 mt-1.5 mr-2"></span>
                        {option}
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center py-8 text-gray-500">
              <PieChart size={36} className="mb-4" />
              <p>Click the refresh button to generate AI investment suggestions.</p>
            </div>
          )}
        </motion.div>
      </div>
      
      {/* Additional Info */}
      <motion.div 
        className="glass-card p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.4, delay: 0.4 }}
      >
        <h3 className="text-xl font-semibold mb-4">Important Notes</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-gray-800 mb-2">About This Plan</h4>
            <p className="text-sm text-gray-600 mb-4">
              This investment plan is generated based on your risk assessment responses and financial information. It's designed to provide a balanced approach to investing that aligns with your risk tolerance and financial goals.
            </p>
            <p className="text-sm text-gray-600">
              We recommend reviewing your investment strategy periodically, especially when there are significant changes in your financial situation or investment goals.
            </p>
          </div>
          
          <div>
            <h4 className="font-medium text-gray-800 mb-2">Disclaimer</h4>
            <p className="text-sm text-gray-600">
              This investment plan is provided for informational purposes only and should not be considered as financial advice. Past performance is not indicative of future results. All investments involve risk, including the potential loss of principal.
            </p>
            <div className="mt-4">
              <Link to="/comparison" className="text-indigo-600 flex items-center hover:text-indigo-800 font-medium">
                Compare with Traditional Strategies
                <ArrowRight size={16} className="ml-1" />
              </Link>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default InvestmentPlan;